version: '3.8'

services:
  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq-promociones
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - promociones-network
  # Zookeeper Cluster
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper1
    container_name: zookeeper1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    volumes:
      - zookeeper1-data:/var/lib/zookeeper/data
      - zookeeper1-log:/var/lib/zookeeper/log
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper2:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper2
    container_name: zookeeper2
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    volumes:
      - zookeeper2-data:/var/lib/zookeeper/data
      - zookeeper2-log:/var/lib/zookeeper/log
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper3:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper3
    container_name: zookeeper3
    ports:
      - "2183:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888;zookeeper2:2888:3888;zookeeper3:2888:3888
    volumes:
      - zookeeper3-data:/var/lib/zookeeper/data
      - zookeeper3-log:/var/lib/zookeeper/log
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Broker Cluster
  kafka1:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka1
    container_name: kafka1
    depends_on:
      zookeeper1:
        condition: service_healthy
      zookeeper2:
        condition: service_healthy
      zookeeper3:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9999:9999"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2181,zookeeper3:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka1-data:/var/lib/kafka/data
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka2:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka2
    container_name: kafka2
    depends_on:
      zookeeper1:
        condition: service_healthy
      zookeeper2:
        condition: service_healthy
      zookeeper3:
        condition: service_healthy
    ports:
      - "9093:9093"
      - "9998:9999"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2181,zookeeper3:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29093,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka2-data:/var/lib/kafka/data
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:9093"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka3:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka3
    container_name: kafka3
    depends_on:
      zookeeper1:
        condition: service_healthy
      zookeeper2:
        condition: service_healthy
      zookeeper3:
        condition: service_healthy
    ports:
      - "9094:9094"
      - "9997:9999"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper1:2181,zookeeper2:2181,zookeeper3:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29094,PLAINTEXT_HOST://localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka3-data:/var/lib/kafka/data
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-broker-api-versions --bootstrap-server localhost:9094"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka Topics Creator (Optional - creates topics on startup)
  kafka-topics-creator:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka-topics-creator
    container_name: kafka-topics-creator
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    networks:
      - kafka-net
    command: |
      bash -c "
        echo 'Creating Kafka topics...'
        kafka-topics --create --if-not-exists --topic ventas --bootstrap-server kafka1:29092,kafka2:29093,kafka3:29094 --partitions 3 --replication-factor 3
        kafka-topics --create --if-not-exists --topic stock --bootstrap-server kafka1:29092,kafka2:29093,kafka3:29094 --partitions 3 --replication-factor 3
        echo 'Topics created successfully!'
        kafka-topics --list --bootstrap-server kafka1:29092,kafka2:29093,kafka3:29094
      "
    restart: "no"

  # Kafka UI (Optional - for monitoring and management)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    ports:
      - "9090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:29092,kafka2:29093,kafka3:29094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper1:2181,zookeeper2:2181,zookeeper3:2181
    networks:
      - kafka-net

  # Microservices
  ms-productos:
    build:
      context: ./ms-productos
      dockerfile: Dockerfile
    container_name: ms-productos
    ports:
      - "8083:8083"
    volumes:
      - ./ms-productos/Wallet_QSYVMD9J8GOANRS4:/app/Wallet_QSYVMD9J8GOANRS4
    networks:
      - app-network

  rmq-ms-carrito-y-ventas:
    build:
      context: ./rmq-ms-carrito-y-ventas
      dockerfile: Dockerfile
    container_name: rmq-ms-carrito-y-ventas
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8084:8084"
    volumes:
      - ./rmq-ms-carrito-y-ventas/Wallet_QSYVMD9J8GOANRS4:/app/Wallet_QSYVMD9J8GOANRS4
    networks:
      - app-network
      - promociones-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  rmq-ms-carrito-y-ventas-consumidor:
    build:
      context: ./rmq-ms-carrito-y-ventas-consumidor
      dockerfile: Dockerfile
    container_name: rmq-ms-carrito-y-ventas-consumidor
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8081:8081"
    volumes:
      - ./rmq-ms-carrito-y-ventas-consumidor/Wallet_QSYVMD9J8GOANRS4:/app/Wallet_QSYVMD9J8GOANRS4
    networks:
      - app-network
      - promociones-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  rmq-ms-promociones:
    build:
      context: ./rmq-ms-promociones
      dockerfile: Dockerfile
    container_name: rmq-ms-promociones
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8085:8085"
    networks:
      - app-network
      - promociones-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  rmq-ms-promociones-consumidor:
    build:
      context: ./rmq-ms-promociones-consumidor
      dockerfile: Dockerfile
    container_name: rmq-ms-promociones-consumidor
    depends_on:
      rabbitmq:
        condition: service_healthy
    ports:
      - "8089:8089"
    networks:
      - app-network
      - promociones-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  adminpromociones:
    build:
      context: ./adminpromociones
      dockerfile: Dockerfile
    container_name: adminpromociones
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    ports:
      - "8087:8087"
    volumes:
      - ./adminpromociones/Wallet_QSYVMD9J8GOANRS4:/app/Wallet_QSYVMD9J8GOANRS4
    networks:
      - app-network
      - kafka-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  adminstock:
    build:
      context: ./adminstock
      dockerfile: Dockerfile
    container_name: adminstock
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    ports:
      - "8090:8090"
    volumes:
      - ./adminstock/Wallet_QSYVMD9J8GOANRS4:/app/Wallet_QSYVMD9J8GOANRS4
    networks:
      - app-network
      - kafka-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  adminventas:
    build:
      context: ./adminventas
      dockerfile: Dockerfile
    container_name: adminventas
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    ports:
      - "8088:8088"
    networks:
      - app-network
      - kafka-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  bff:
    build:
      context: ./bff
      dockerfile: Dockerfile
    container_name: bff
    ports:
      - "8080:8080"
    networks:
      - app-network

volumes:
  zookeeper1-data:
  zookeeper1-log:
  zookeeper2-data:
  zookeeper2-log:
  zookeeper3-data:
  zookeeper3-log:
  kafka1-data:
  kafka2-data:
  kafka3-data:
  rabbitmq_data:

networks:
  kafka-net:
    driver: bridge
  promociones-network:
    driver: bridge
  app-network:
    driver: bridge 
